import { db } from "../lib/firebase";
import { fetchFromAPI } from "./utils";
/**
 * @param  {} user
 * Binds Firebase user subscription data stored in Firestore
 */
export async function parseUser(user) {
  const { uid } = user;
  try {
    const subscription = await db
      .collection("users")
      .doc(uid)
      .collection("private")
      .doc("subscription")
      .get();
    console.log(subscription.data());

    return { ...user, subscriptionType: false, ...subscription.data() };
  } catch (e) {
    console.log(e);
    return { ...user, subscriptionType: false };
  }
}
/**
 *
 *
 *
 * @param  {} user
 * Saves name and email of the user to Firestore database
 * The doc id is the uid token
 */
export async function saveUserToFirestore(user) {
  try {
    const { uid, email, displayName: name } = user;
    await db.collection("users").doc(uid).set({ email, name }, { merge: true });
  } catch (e) {
    console.log("An error happened while saving the user to Firestore", e);
  }
}
/**
 *
 *
 *
 *
 * @param  {string} fontName
 * @param  {} user
 *
 * Save to Firestore the unliked font
 * Doc id autogenerated, doc fields: fontName
 *
 * We can't blacklist a font two times because
 * that information is taken into account to show the
 * fonts in future uses
 *
 * TODO: Make it work with the server, not the db directly
 */
export async function blacklistFont(fontObj, user) {
  fetchFromAPI("/fonts/blacklist", { method: "POST", body: { fontObj } });
}
/**
 * @param  {Array} fontNames an array of arrays [[font1, font2],[]]. Each inner array
 * corresponds to a pair of liked fonts
 * @param  {string} uid
 * Save the list of liked fonts to Firestore db
 * TODO: what if the user has already saved the font match?
 * this should be handled by the server
 */
export async function saveLikedFonts(fontNames, uid) {
  fetchFromAPI("/fonts/save-liked", { body: { fontNames } });
}
/**
 *
 * @param {string} uid
 * @returns a list of blacklisted fonts ready for use as filters: ["fontFamily",...]
 */
export async function getBlacklistedFonts(uid) {
  try {
    const blFonts = await db
      .collection("users")
      .doc(uid)
      .collection("unlikedFonts")
      .get();
    console.log(blFonts);
    return blFonts;
  } catch (error) {
    console.log(
      "An error happened while fetching the blacklisted fonts",
      error
    );
    return [];
  }
}
